Creating PDF
============
.. External references

.. _faker-file: https://pypi.org/project/faker-file/

PDF is certainly one of the most complicated formats out there. And
certainly one of the formats most of the developers will be having trouble
with, as there are many versions and dialects.

The goal of this library is to help you out with basic tasks. You can easily
generate PDFs with 100 pages (paper size is A4), having a little text on each.
Or you can generate PDFs with images. Currently, you can't have both at the
same time.

If you don't like how PDF files are generated by this library, you can
check the `faker-file`_ package, which can produce pretty comprehensive PDFs.

Building PDF with text
----------------------

.. container:: jsphinx-download

    .. literalinclude:: _static/examples/creating_pdf/text_pdf_1.py
        :language: python

    *See the full example*
    :download:`here <_static/examples/creating_pdf/text_pdf_1.py>`

The generated PDF will have 10,000 characters of text, which is about 2 pages.

If you want PDF with more pages, you could either:

- Increase the value of ``max_nb_chars`` accordingly.
- Set value of ``wrap_chars_after`` to 80 characters to force longer pages.
- Insert manual page breaks and other content.

----

See the example below for ``max_nb_chars`` tweak:

.. container:: jsphinx-download

    .. literalinclude:: _static/examples/creating_pdf/pdfkit_2.py
        :language: python
        :lines: 11-

    *See the full example*
    :download:`here <_static/examples/creating_pdf/pdfkit_2.py>`

----

See the example below for ``wrap_chars_after`` tweak:

.. container:: jsphinx-download

    .. literalinclude:: _static/examples/creating_pdf/pdfkit_3.py
        :language: python
        :lines: 11-

    *See the full example*
    :download:`here <_static/examples/creating_pdf/pdfkit_3.py>`

----

As mentioned above, it's possible to diversify the generated context with
images, paragraphs, tables, manual text break and pretty much everything that
is supported by PDF format specification, although currently only images,
paragraphs, tables and manual text breaks are supported out of the box. In
order to customise the blocks PDF file is built from, the ``DynamicTemplate``
class is used. See the example below for usage examples:

.. container:: jsphinx-download

    .. literalinclude:: _static/examples/creating_pdf/pdfkit_4.py
        :language: python
        :lines: 3-9, 17-

    *See the full example*
    :download:`here <_static/examples/creating_pdf/pdfkit_4.py>`

Creating PDFs with graphics using `Pillow`_
-------------------------------------------
There's a so called `graphic` PDF file provider available. Produced PDF files
would not contain text, so don't use it when you need text based content.
However, sometimes you just need a valid file in PDF format, without
caring much about the content. That's where a GraphicPdfFileProvider comes to
rescue:

.. container:: jsphinx-download

    .. literalinclude:: _static/examples/creating_pdf/pillow_4.py
        :language: python
        :lines: 2-3, 7-

    *See the full example*
    :download:`here <_static/examples/creating_pdf/pillow_4.py>`

The generated file will contain a random graphic (consisting of lines and
shapes of different colours).

----

One of the most useful arguments supported is ``size``.

.. container:: jsphinx-download

    .. literalinclude:: _static/examples/creating_pdf/pillow_5.py
        :language: python
        :lines: 7-

    *See the full example*
    :download:`here <_static/examples/creating_pdf/pillow_5.py>`
