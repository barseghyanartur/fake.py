[project]
name = "fake.py"
description = "Minimalistic, standalone alternative fake data generator with no dependencies."
readme = "README.rst"
version = "0.10.5"
dependencies = []
authors = [
    {name = "Artur Barseghyan", email = "artur.barseghyan@gmail.com"},
]
maintainers = [
    {name = "Artur Barseghyan", email = "artur.barseghyan@gmail.com"},
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development",
]
keywords = ["fake data", "test data"]

[project.urls]
Homepage = "https://github.com/barseghyanartur/fake.py/"
Issues = "https://github.com/barseghyanartur/fake.py/issues"
Documentation = "https://fakepy.readthedocs.io/"
Repository = "https://github.com/barseghyanartur/fake.py/"
Changelog = "https://fakepy.readthedocs.io/en/latest/changelog.html"

[project.optional-dependencies]
all = ["fake.py[dev,test,docs]"]
dev = [
    "detect-secrets",
    "doc8",
    "ipython",
    "mypy",
    "pip-tools",
    "pydoclint",
    "ruff",
    "twine",
    "uv",
]
test = [
    "django",
    "pytest",
    "pytest-cov",
    "pytest-django",
    "pytest-rst",
]
docs = [
    "sphinx<6.0",
    "sphinx-autobuild",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-no-pragma",
]

[project.scripts]
fake-py = "fake:main"

[tool.setuptools]
py-modules = ["fake"]

[tool.setuptools.packages.find]
where = ["."]
include = ["fakepy"]

# Build system information below.
[build-system]
requires = ["setuptools>=41.0", "setuptools-scm", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
line-length = 80

# Enable Pyflakes `E` and `F` codes by default.
lint.select = [
#    "ANN",  # Annotations: missing (return) types
    "B",  # Bugbear: common bug patterns or design problems
    "C4",  # Complexity: McCabe complexity checker
    "E",  # Pycodesyle: Style guide enforcement
    "F",  # Pyflakes: Source files errors
    "G",  # Logging format: Basic logging format errors
    "I",  # Isort: import sorting
    "ISC",  # Naming: Variable naming convention
    "INP",  # Implicit namespace packages: Check if __init__.py is present
    "N",  # Naming: Variable naming convention
    "PERF",  # Perflint: Performance linting
    "Q",
    "SIM",  # Simplify: Helps simplify your code
    "TD",  # TO DO: Format TO DO comments
]
lint.ignore = [
    "G004",  # Allow use of f-string in logging
    "ISC003",  # Allow explicitly concatenated strings
#    "N805",  # Allow first argument of a method be named other than `self`
    "TD002",  # Allow to do without author
    "TD003",  # Allow to do without URL
]
# Enable autofix for formatting and import sorting
fix = true
src = [
    "examples/customization",
    "examples/dataclasses",
    "examples/django",
    "examples/hypothesis",
    "examples/lazyfuzzy",
    "examples/pydantic",
    "examples/sqlalchemy",
    "examples/sqlmodel",
    "examples/tortoise",
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs",
]

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.9.
target-version = "py39"

[tool.ruff.lint.per-file-ignores]
"conftest.py" = [
    "PERF203"  # Allow `try`-`except` within a loop incurs performance overhead
]

[tool.ruff.lint.isort]
known-first-party = [
    "address",
    "article",
    "config",
    "data",
    "fake_address",
    "fake_band",
]
known-third-party = []

[tool.doc8]
ignore-path = [
    "docs/requirements.txt",
    "fake.py.egg-info/SOURCES.txt",
]

[tool.pytest.ini_options]
addopts = [
    "-ra",
    "-vvv",
    "-q",
   "--cov=fake",
   "--ignore=.tox",
   "--ignore=requirements",
   "--ignore=release",
   "--ignore=tmp",
   "--cov-report=html",
   "--cov-report=term",
   "--cov-report=annotate",
   "--cov-append",
   "--capture=no",
]
testpaths = [
    "fake.py",
    "__copy_fake.py",
    "*.rst",
    "**/*.rst",
]
pythonpath = [
    "examples/django",
]
DJANGO_SETTINGS_MODULE = "blog.settings"

[tool.coverage.run]
relative_files = true
omit = [
    ".tox/*",
]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "@overload",
]

[tool.mypy]
check_untyped_defs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[tool.pydoclint]
style = 'sphinx'
exclude = '\.git|\.tox|tests/data|__copy_fake\.py'
require-return-section-when-returning-nothing = false
allow-init-docstring = true
arg-type-hints-in-docstring = false
